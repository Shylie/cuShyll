union MaterialData
{
	struct LambertianData
	{
		int data;
		int data2;
	} Lambertian;
	struct MetalData
	{
		int data;
		int data2;
		int data3;
	} Metal;
	__host__ __device__ MaterialData(LambertianData data) : Lambertian(data) { }
	__host__ __device__ MaterialData(MetalData data) : Metal(data) { }
};

__host__ __device__ bool LambertianDoSomething(int arg, MaterialData data);
__host__ __device__ bool LambertianDoSomethingElse(int arg2, MaterialData data);

__host__ __device__ bool MetalDoSomething(int arg, MaterialData data);
__host__ __device__ bool MetalDoSomethingElse(int arg2, MaterialData data);

struct Material
{
	enum class Type
	{
		Lambertian,
		Metal,
	} type;

	MaterialData data;
	__host__ __device__ Material(Type type, MaterialData data) : type(type), data(data) { }

	__host__ __device__ bool DoSomething(int arg)
	{
		switch (type)
		{
		case Type::Lambertian:
			return LambertianDoSomething(arg, data);
		case Type::Metal:
			return MetalDoSomething(arg, data);
		default:
			return bool();
		}
	}

	__host__ __device__ bool DoSomethingElse(int arg2)
	{
		switch (type)
		{
		case Type::Lambertian:
			return LambertianDoSomethingElse(arg2, data);
		case Type::Metal:
			return MetalDoSomethingElse(arg2, data);
		default:
			return bool();
		}
	}
};

__host__ __device__ bool LambertianDoSomething(int arg, MaterialData data)
{
	return arg > data.Lambertian.data;
}
__host__ __device__ bool LambertianDoSomethingElse(int arg2, MaterialData data)
{
	return arg2 < data.Lambertian.data + data.Lambertian.data.Lambertian.data.Lambertian.data2;
}

__host__ __device__ bool MetalDoSomething(int arg, MaterialData data)
{
	return arg + data.Metal.data > data.Metal.data.Metal.data.Metal.data2 + data.Metal.data.Metal.data.Metal.data3;
}
__host__ __device__ bool MetalDoSomethingElse(int arg2, MaterialData data)
{
	return arg2 - data.Metal.data < data.Metal.data.Metal.data.Metal.data3 - data.Metal.data.Metal.data.Metal.data2;
}

__host__ __device__ Material Lambertian(int data, int data2)
{
	MaterialData::LambertianData data;
	data.data = data;
	data.data2 = data2;
	return Material(Material::Type::Lambertian, data);
}
__host__ __device__ Material Metal(int data, int data2, int data3)
{
	MaterialData::MetalData data;
	data.data = data;
	data.data2 = data2;
	data.data3 = data3;
	return Material(Material::Type::Metal, data);
}
